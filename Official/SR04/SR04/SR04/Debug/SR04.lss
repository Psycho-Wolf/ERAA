
SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000286  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  0000031c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000731  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000650  00000000  00000000  00000af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a3  00000000  00000000  00001145  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000387  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020a  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_10>
  2c:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_11>
  30:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile uint8_t calculate = 0;
volatile uint16_t endCount, startCount;

void display(uint8_t intDist, uint8_t decOne, uint8_t decTwo);

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	
	DDRB = 0x02;
  b0:	84 e2       	ldi	r24, 0x24	; 36
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	22 e0       	ldi	r18, 0x02	; 2
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
	
	TCCR1B |= (1 << WGM12); // Enable CTC Mode
  ba:	81 e8       	ldi	r24, 0x81	; 129
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	21 e8       	ldi	r18, 0x81	; 129
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	28 60       	ori	r18, 0x08	; 8
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	TCCR1B |= (1 << ICES1); // Input capture edge select
  cc:	81 e8       	ldi	r24, 0x81	; 129
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	21 e8       	ldi	r18, 0x81	; 129
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	f9 01       	movw	r30, r18
  d6:	20 81       	ld	r18, Z
  d8:	20 64       	ori	r18, 0x40	; 64
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
	TCNT1 = 0;
  de:	84 e8       	ldi	r24, 0x84	; 132
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	11 82       	std	Z+1, r1	; 0x01
  e6:	10 82       	st	Z, r1
	TCCR1B |= (1 << CS11) | (1 << CS10);	//Start Timer, Prescaler = 64
  e8:	81 e8       	ldi	r24, 0x81	; 129
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	21 e8       	ldi	r18, 0x81	; 129
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	23 60       	ori	r18, 0x03	; 3
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	// Input capture edge select,  Output compare 1A and 1B
	TIMSK1 |= (1 << ICIE1) | (1 << OCIE1A) | (1 << OCIE1B);
  fa:	8f e6       	ldi	r24, 0x6F	; 111
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	2f e6       	ldi	r18, 0x6F	; 111
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	26 62       	ori	r18, 0x26	; 38
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	OCR1A = 15008; //32767
 10c:	88 e8       	ldi	r24, 0x88	; 136
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	20 ea       	ldi	r18, 0xA0	; 160
 112:	3a e3       	ldi	r19, 0x3A	; 58
 114:	fc 01       	movw	r30, r24
 116:	31 83       	std	Z+1, r19	; 0x01
 118:	20 83       	st	Z, r18
	OCR1B = 8; // 8
 11a:	8a e8       	ldi	r24, 0x8A	; 138
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	28 e0       	ldi	r18, 0x08	; 8
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	31 83       	std	Z+1, r19	; 0x01
 126:	20 83       	st	Z, r18
	sei();
 128:	78 94       	sei
	
	uint16_t count;
	
	while(1){
		if(calculate){
 12a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 12e:	88 23       	and	r24, r24
 130:	e1 f3       	breq	.-8      	; 0x12a <main+0x84>
			count = endCount - startCount;
 132:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <endCount>
 136:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <endCount+0x1>
 13a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <startCount>
 13e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <startCount+0x1>
 142:	a9 01       	movw	r20, r18
 144:	48 1b       	sub	r20, r24
 146:	59 0b       	sbc	r21, r25
 148:	ca 01       	movw	r24, r20
 14a:	9a 83       	std	Y+2, r25	; 0x02
 14c:	89 83       	std	Y+1, r24	; 0x01
			TCCR1B |= (1 << ICES1);
 14e:	81 e8       	ldi	r24, 0x81	; 129
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	21 e8       	ldi	r18, 0x81	; 129
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	20 64       	ori	r18, 0x40	; 64
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
			if(count > 223){
				
			}
		}
	}
 160:	e4 cf       	rjmp	.-56     	; 0x12a <main+0x84>

00000162 <__vector_10>:
	
}

ISR(TIMER1_CAPT_vect) {
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
	static uint8_t edgeCatch = 1;				//1 => First rising edge
												//0 => Falling edge
	if(edgeCatch) {
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	88 23       	and	r24, r24
 188:	e9 f0       	breq	.+58     	; 0x1c4 <__vector_10+0x62>
		startCount = TCNT1;
 18a:	84 e8       	ldi	r24, 0x84	; 132
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	80 81       	ld	r24, Z
 192:	91 81       	ldd	r25, Z+1	; 0x01
 194:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <startCount+0x1>
 198:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <startCount>
		edgeCatch = 0;
 19c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		TCCR1B &= (0 << ICES1);
 1a0:	81 e8       	ldi	r24, 0x81	; 129
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	81 e8       	ldi	r24, 0x81	; 129
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	10 82       	st	Z, r1
		TCCR1B |= (1 << CS11) | (1 << CS10);	//Start Timer, Prescaler = 64
 1b0:	81 e8       	ldi	r24, 0x81	; 129
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	21 e8       	ldi	r18, 0x81	; 129
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	23 60       	ori	r18, 0x03	; 3
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
		endCount = TCNT1;
		edgeCatch = 1;
		calculate = 1;

	}
}
 1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <__vector_10+0x80>
		TCCR1B &= (0 << ICES1);
		TCCR1B |= (1 << CS11) | (1 << CS10);	//Start Timer, Prescaler = 64


	} else {
		endCount = TCNT1;
 1c4:	84 e8       	ldi	r24, 0x84	; 132
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <endCount+0x1>
 1d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <endCount>
		edgeCatch = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		calculate = 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>

	}
}
 1e2:	00 00       	nop
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x02;
 21e:	85 e2       	ldi	r24, 0x25	; 37
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	22 e0       	ldi	r18, 0x02	; 2
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
}
 228:	00 00       	nop
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_12>:

ISR(TIMER1_COMPB_vect){
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x00;
 260:	85 e2       	ldi	r24, 0x25	; 37
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fc 01       	movw	r30, r24
 266:	10 82       	st	Z, r1
}
 268:	00 00       	nop
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
